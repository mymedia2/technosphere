Index: gcc/common.opt
===================================================================
--- gcc/common.opt	(revision 234707)
+++ gcc/common.opt	(working copy)
@@ -1180,6 +1180,24 @@
 Common Var(flag_diagnostics_show_option) Init(1)
 Amend appropriate diagnostic messages with the command line option that controls them.
 
+;Common Report Enum(diagnostic_format_t) Var(diagnostic_format) Init(DIAGNOSTICS_FORMAT_TEXT)
+fdiagnostics-output-format=
+Driver Common Joined RejectNegative Var(flag_diagnostics_format) Enum(diagnostic_format_t) Init(DIAGNOSTICS_FORMAT_TEXT)
+-fdiagnostics-output-format=[text|xml]	Output format of diagnostics
+
+; Required for these enum values.
+SourceInclude
+diagnostic.h
+
+Enum
+Name(diagnostic_format_t) Type(int) UnknownError(unrecognized diagnostics output format %qs)
+
+EnumValue
+Enum(diagnostic_format_t) String(text) Value(DIAGNOSTICS_FORMAT_TEXT)
+
+EnumValue
+Enum(diagnostic_format_t) String(xml) Value(DIAGNOSTICS_FORMAT_XML)
+
 fdisable-
 Common Joined RejectNegative Var(common_deferred_options) Defer
 -fdisable-[tree|rtl|ipa]-<pass>=range1+range2 disables an optimization pass.
Index: gcc/diagnostic.c
===================================================================
--- gcc/diagnostic.c	(revision 234707)
+++ gcc/diagnostic.c	(working copy)
@@ -696,6 +696,12 @@
   if (diagnostic->kind == DK_NOTE && context->inhibit_notes_p)
     return false;
 
+  // maybe insert our code here
+  if (context->xml_output_format == DIAGNOSTICS_FORMAT_XML)
+    {
+      puts("Flag of XML diagnostics works!");
+    }
+
   if (context->lock > 0)
     {
       /* If we're reporting an ICE in the middle of some other error,
Index: gcc/diagnostic.h
===================================================================
--- gcc/diagnostic.h	(revision 234707)
+++ gcc/diagnostic.h	(working copy)
@@ -24,6 +24,15 @@
 #include "pretty-print.h"
 #include "diagnostic-core.h"
 
+/* What format output diagnostics
+   o DIAGNOSTICS_FORMAT_TEXT: text human readable style
+   o DIAGNOSTICS_FORMAT_XML: in XML for IDE. */
+typedef enum
+{
+  DIAGNOSTICS_FORMAT_TEXT,
+  DIAGNOSTICS_FORMAT_XML
+} diagnostic_output_format_t;
+
 /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of
    its context and its KIND (ice, error, warning, note, ...)  See complete
    list in diagnostic.def.  */
@@ -201,6 +210,9 @@
      source code (to avoid e.g. colorizing just the first character in
      a token, which would look strange).  */
   bool colorize_source_p;
+
+  /* Whether to output diagnostics in XML format */
+  bool xml_output_format;
 };
 
 static inline void
Index: gcc/opts.c
===================================================================
--- gcc/opts.c	(revision 234707)
+++ gcc/opts.c	(working copy)
@@ -1865,6 +1865,10 @@
       diagnostic_color_init (dc, value);
       break;
 
+	case OPT_fdiagnostics_output_format_:
+	  dc->xml_output_format = value;
+	  break;
+
     case OPT_fdiagnostics_show_option:
       dc->show_option_requested = value;
       break;

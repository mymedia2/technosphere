Index: gcc/Makefile.in
===================================================================
--- gcc/Makefile.in	(revision 235121)
+++ gcc/Makefile.in	(working copy)
@@ -963,7 +963,7 @@
 TREE_PRETTY_PRINT_H = tree-pretty-print.h $(PRETTY_PRINT_H)
 GIMPLE_PRETTY_PRINT_H = gimple-pretty-print.h $(TREE_PRETTY_PRINT_H)
 DIAGNOSTIC_CORE_H = diagnostic-core.h $(INPUT_H) bversion.h diagnostic.def
-DIAGNOSTIC_H = diagnostic.h $(DIAGNOSTIC_CORE_H) $(PRETTY_PRINT_H)
+DIAGNOSTIC_H = diagnostic.h diagnostic-xml.h $(DIAGNOSTIC_CORE_H) $(PRETTY_PRINT_H)
 C_PRETTY_PRINT_H = c-family/c-pretty-print.h $(PRETTY_PRINT_H) \
 	$(C_COMMON_H) $(TREE_H)
 TREE_INLINE_H = tree-inline.h
@@ -1540,7 +1540,7 @@
 
 # Objects in libcommon.a, potentially used by all host binaries and with
 # no target dependencies.
-OBJS-libcommon = diagnostic.o diagnostic-color.o diagnostic-show-locus.o \
+OBJS-libcommon = diagnostic.o diagnostic-xml.o diagnostic-color.o diagnostic-show-locus.o \
 	pretty-print.o intl.o \
 	vec.o input.o version.o hash-table.o ggc-none.o memory-block.o
 
Index: gcc/common.opt
===================================================================
--- gcc/common.opt	(revision 235121)
+++ gcc/common.opt	(working copy)
@@ -1180,6 +1180,24 @@
 Common Var(flag_diagnostics_show_option) Init(1)
 Amend appropriate diagnostic messages with the command line option that controls them.
 
+;Common Report Enum(diagnostic_format_t) Var(diagnostic_format) Init(DIAGNOSTICS_FORMAT_TEXT)
+fdiagnostics-output-format=
+Driver Common Joined RejectNegative Var(flag_diagnostics_format) Enum(diagnostic_format_t) Init(DIAGNOSTICS_FORMAT_TEXT)
+-fdiagnostics-output-format=[text|xml]	Output format of diagnostics
+
+; Required for these enum values.
+SourceInclude
+diagnostic.h
+
+Enum
+Name(diagnostic_format_t) Type(int) UnknownError(unrecognized diagnostics output format %qs)
+
+EnumValue
+Enum(diagnostic_format_t) String(text) Value(DIAGNOSTICS_FORMAT_TEXT)
+
+EnumValue
+Enum(diagnostic_format_t) String(xml) Value(DIAGNOSTICS_FORMAT_XML)
+
 fdisable-
 Common Joined RejectNegative Var(common_deferred_options) Defer
 -fdisable-[tree|rtl|ipa]-<pass>=range1+range2 disables an optimization pass.
Index: gcc/diagnostic.c
===================================================================
--- gcc/diagnostic.c	(revision 235121)
+++ gcc/diagnostic.c	(working copy)
@@ -31,6 +31,7 @@
 #include "backtrace.h"
 #include "diagnostic.h"
 #include "diagnostic-color.h"
+#include "diagnostic-xml.h"
 
 #ifdef HAVE_TERMIOS_H
 # include <termios.h>
@@ -572,7 +573,9 @@
 default_diagnostic_finalizer (diagnostic_context *context,
 			      diagnostic_info *diagnostic)
 {
-  diagnostic_show_locus (context, diagnostic);
+  pp_newline (context->printer);
+  if (context->xml_output_format)
+	diagnostic_show_locus (context, diagnostic);
   pp_destroy_prefix (context->printer);
   pp_flush (context->printer);
 }
@@ -770,6 +773,17 @@
 	return false;
     }
 
+  if (diagnostic->kind == DK_ERROR && orig_diag_kind == DK_WARNING)
+    ++diagnostic_kind_count (context, DK_WERROR);
+  else
+    ++diagnostic_kind_count (context, diagnostic->kind);
+
+  // maybe insert our code here
+  if (context->xml_output_format == DIAGNOSTICS_FORMAT_XML)
+    {
+	  return output_xml_diagnositc (context, diagnostic);
+    }
+
   context->lock++;
 
   if (diagnostic->kind == DK_ICE || diagnostic->kind == DK_ICE_NOBT)
@@ -793,10 +807,6 @@
 				    diagnostic->message.format_spec,
 				    diagnostic->message.args_ptr);
     }
-  if (diagnostic->kind == DK_ERROR && orig_diag_kind == DK_WARNING)
-    ++diagnostic_kind_count (context, DK_WERROR);
-  else
-    ++diagnostic_kind_count (context, diagnostic->kind);
 
   saved_format_spec = diagnostic->message.format_spec;
   if (context->show_option_requested)
@@ -911,6 +921,7 @@
   pp_output_formatted_text (context->printer);
   pp_destroy_prefix (context->printer);
   pp_set_prefix (context->printer, saved_prefix);
+  /* TODO */
   diagnostic_show_locus (context, &diagnostic);
   va_end (ap);
 }
Index: gcc/diagnostic.h
===================================================================
--- gcc/diagnostic.h	(revision 235121)
+++ gcc/diagnostic.h	(working copy)
@@ -24,6 +24,15 @@
 #include "pretty-print.h"
 #include "diagnostic-core.h"
 
+/* What format output diagnostics
+   o DIAGNOSTICS_FORMAT_TEXT: text human readable style
+   o DIAGNOSTICS_FORMAT_XML: in XML for IDE. */
+typedef enum
+{
+  DIAGNOSTICS_FORMAT_TEXT,
+  DIAGNOSTICS_FORMAT_XML
+} diagnostic_output_format_t;
+
 /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of
    its context and its KIND (ice, error, warning, note, ...)  See complete
    list in diagnostic.def.  */
@@ -201,6 +210,9 @@
      source code (to avoid e.g. colorizing just the first character in
      a token, which would look strange).  */
   bool colorize_source_p;
+
+  /* Whether to output diagnostics in XML format */
+  bool xml_output_format;
 };
 
 static inline void
Index: gcc/opts.c
===================================================================
--- gcc/opts.c	(revision 235121)
+++ gcc/opts.c	(working copy)
@@ -1865,6 +1865,10 @@
       diagnostic_color_init (dc, value);
       break;
 
+	case OPT_fdiagnostics_output_format_:
+	  dc->xml_output_format = value;
+	  break;
+
     case OPT_fdiagnostics_show_option:
       dc->show_option_requested = value;
       break;
Index: gcc/c-family/c-opts.c
===================================================================
--- gcc/c-family/c-opts.c	(revision 235121)
+++ gcc/c-family/c-opts.c	(working copy)
@@ -164,7 +164,9 @@
 c_diagnostic_finalizer (diagnostic_context *context,
 			diagnostic_info *diagnostic)
 {
-  diagnostic_show_locus (context, diagnostic);
+  pp_newline (context->printer);
+  if (!context->xml_output_format)
+    diagnostic_show_locus (context, diagnostic);
   /* By default print macro expansion contexts in the diagnostic
      finalizer -- for tokens resulting from macro expansion.  */
   virt_loc_aware_diagnostic_finalizer (context, diagnostic);
Index: gcc/diagnostic-show-locus.c
===================================================================
--- gcc/diagnostic-show-locus.c	(revision 235121)
+++ gcc/diagnostic-show-locus.c	(working copy)
@@ -1093,8 +1093,6 @@
 diagnostic_show_locus (diagnostic_context * context,
 		       const diagnostic_info *diagnostic)
 {
-  pp_newline (context->printer);
-
   if (!context->show_caret
       || diagnostic_location (diagnostic, 0) <= BUILTINS_LOCATION
       || diagnostic_location (diagnostic, 0) == context->last_location)
Index: gcc/fortran/error.c
===================================================================
--- gcc/fortran/error.c	(revision 235121)
+++ gcc/fortran/error.c	(working copy)
@@ -1093,6 +1093,7 @@
     {
       pp_verbatim (context->printer, locus_prefix);
       free (locus_prefix);
+      pp_newline (context->printer);
       /* Fortran uses an empty line between locus and caret line.  */
       pp_newline (context->printer);
       diagnostic_show_locus (context, diagnostic);
